[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "graphrag-mcp-toolkit"
version = "0.1.0"
description = "Open-source platform for creating domain-specific GraphRAG MCP servers"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Aimie Garces", email = "aimie@example.com"}
]
maintainers = [
    {name = "Aimie Garces", email = "aimie@example.com"}
]
keywords = [
    "graphrag", "mcp", "knowledge-graph", "rag", "ollama", "langchain",
    "literature-review", "academic", "research", "domain-specific"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.10"
dependencies = [
    # Core framework
    "typer[all]>=0.9.0",
    "rich>=13.0.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    # LangChain ecosystem
    "langchain>=0.2.0",
    "langchain-community>=0.2.0",
    "langchain-ollama>=0.1.0",
    "langchain-text-splitters>=0.2.0",
    "langchain-core>=0.2.0",
    # Vector storage and search
    "chromadb>=0.4.0",
    "numpy>=1.24.0",
    "scikit-learn>=1.3.0",
    # Graph processing
    "networkx>=3.0",
    # Document processing
    "pypdf>=3.0.0",
    "python-multipart>=0.0.6",
    # FastMCP framework
    "fastmcp>=0.1.0",
    # Utilities
    "python-dotenv>=1.0.0",
    "aiofiles>=23.0.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    # Development tools
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
    "isort>=5.12.0",
    "bandit[toml]>=1.7.5",
    "safety>=2.3.0",
    
    # Jupyter and documentation
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "ipywidgets>=8.0.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/Eleftheria14/scientific-paper-analyzer"
Documentation = "https://github.com/Eleftheria14/scientific-paper-analyzer#readme"
Repository = "https://github.com/Eleftheria14/scientific-paper-analyzer"
"Bug Tracker" = "https://github.com/Eleftheria14/scientific-paper-analyzer/issues"

[project.scripts]
graphrag-mcp = "graphrag_mcp.cli.main:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["graphrag_mcp*"]
exclude = ["tests*", "examples*", "docs*"]

[tool.setuptools.package-data]
graphrag_mcp = ["templates/*.json", "templates/*.yaml", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "langchain.*",
    "chromadb.*",
    "sklearn.*",
    "numpy.*",
    "fastmcp.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["graphrag_mcp"]
omit = [
    "tests/*",
    "*/venv/*",
    "*/.venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
known_first_party = ["graphrag_mcp"]
skip = ["__init__.py"]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]

# Safety configuration
[tool.safety]
ignore = []
