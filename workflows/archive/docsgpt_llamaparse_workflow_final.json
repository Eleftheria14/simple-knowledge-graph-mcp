{
  "name": "DocsGPT-LlamaParse-Integration-Final",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "docsgpt-batch-process",
        "responseMode": "lastNode",
        "responseData": "allEntries"
      },
      "id": "webhook-trigger",
      "name": "DocsGPT Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "docsgpt-batch-process"
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Minimal debug - check line by line\ntry {\n  console.log('Line 1: Starting');\n  console.log('Line 2: typeof items =', typeof items);\n  console.log('Line 3: items exists =', !!items);\n  console.log('Line 4: items.length =', items ? items.length : 'items is null');\n  \n  if (!items || items.length === 0) {\n    throw new Error('Items array is empty or undefined');\n  }\n  \n  console.log('Line 5: items[0] exists =', !!items[0]);\n  console.log('Line 6: typeof items[0] =', typeof items[0]);\n  \n  if (!items[0]) {\n    throw new Error('items[0] is undefined');\n  }\n  \n  console.log('Line 7: items[0] keys =', Object.keys(items[0]));\n  \n  // Simple fixed path approach based on what we know works\n  const result = {\n    success: true,\n    message: 'Debug workflow executed',\n    container_path: '/data/local/chemistry-json-debug-test.pdf/d4sc03921a.pdf'\n  };\n  \n  console.log('Line 8: Returning result');\n  return [{ json: result }];\n  \n} catch (error) {\n  console.log('ERROR:', error.message);\n  throw error;\n}"
      },
      "id": "transform-path",
      "name": "Transform File Path",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "filePath": "={{ $('Transform File Path').first().json.container_path }}",
        "options": {}
      },
      "id": "read-file",
      "name": "Read PDF File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloud.llamaindex.ai/api/parsing/upload",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer LLAMAPARSE_API_KEY_PLACEHOLDER"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "file",
              "value": "={{ $binary.data }}",
              "type": "formBinaryData"
            },
            {
              "name": "result_type",
              "value": "markdown"
            },
            {
              "name": "premium_mode",
              "value": "true"
            }
          ]
        }
      },
      "id": "llamaparse-upload",
      "name": "LlamaParse Upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 300]
    },
    {
      "parameters": {
        "unit": "seconds",
        "amount": 45
      },
      "id": "wait-processing",
      "name": "Wait for Processing",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api.cloud.llamaindex.ai/api/parsing/job/{{ $('LlamaParse Upload').first().json.id }}/result/markdown",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer LLAMAPARSE_API_KEY_PLACEHOLDER"
            }
          ]
        }
      },
      "id": "get-results",
      "name": "Get LlamaParse Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "const llamaParseResult = items[0].json;\nconst pathData = $('Transform File Path').first().json;\n\nlet markdownContent = '';\nif (llamaParseResult && llamaParseResult.markdown) {\n  markdownContent = llamaParseResult.markdown;\n} else if (typeof llamaParseResult === 'string') {\n  markdownContent = llamaParseResult;\n}\n\nconst response = {\n  success: true,\n  batch_id: pathData.batch_id,\n  user_id: pathData.user_id,\n  processed_file: pathData.file_name,\n  markdown_length: markdownContent.length,\n  markdown_preview: markdownContent.substring(0, 200) + '...',\n  processing_timestamp: new Date().toISOString(),\n  status: 'processing_complete',\n  llama_parse_job_id: $('LlamaParse Upload').first().json.id\n};\n\nreturn [{ json: response }];"
      },
      "id": "prepare-response",
      "name": "Prepare Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1560, 300]
    }
  ],
  "connections": {
    "DocsGPT Webhook": {
      "main": [
        [
          {
            "node": "Transform File Path",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transform File Path": {
      "main": [
        [
          {
            "node": "Read PDF File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF File": {
      "main": [
        [
          {
            "node": "LlamaParse Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LlamaParse Upload": {
      "main": [
        [
          {
            "node": "Wait for Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Processing": {
      "main": [
        [
          {
            "node": "Get LlamaParse Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get LlamaParse Results": {
      "main": [
        [
          {
            "node": "Prepare Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "final",
  "meta": {},
  "id": "docsgpt-llamaparse-integration-final",
  "tags": []
}