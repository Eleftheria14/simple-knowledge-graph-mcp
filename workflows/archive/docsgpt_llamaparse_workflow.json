{
  "name": "DocsGPT-LlamaParse-Integration",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "docsgpt-batch-process",
        "responseMode": "lastNode",
        "responseData": "allEntries",
        "authentication": "none",
        "options": {
          "responseHeaders": {
            "Content-Type": "application/json"
          }
        }
      },
      "id": "webhook-trigger",
      "name": "DocsGPT Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        240,
        300
      ],
      "webhookId": "docsgpt-batch-process"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "id": "split-batches",
      "name": "Split Files",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "filePath": "={{ $json.files[0].path }}"
      },
      "id": "read-file",
      "name": "Read PDF File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.cloud.llamaindex.ai/api/parsing/upload",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer LLAMAPARSE_API_KEY_PLACEHOLDER"
            },
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "result_type",
              "value": "markdown"
            },
            {
              "name": "premium_mode",
              "value": "true"
            }
          ]
        },
        "sendBinaryData": true,
        "binaryPropertyName": "file"
      },
      "id": "llamaparse-upload",
      "name": "LlamaParse Upload",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "unit": "seconds",
        "amount": 45
      },
      "id": "wait-processing",
      "name": "Wait for Processing",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "method": "GET",
        "url": "=https://api.cloud.llamaindex.ai/api/parsing/job/{{ $('LlamaParse Upload').first().json.id }}/result/markdown",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer LLAMAPARSE_API_KEY_PLACEHOLDER"
            }
          ]
        }
      },
      "id": "get-results",
      "name": "Get LlamaParse Results",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1340,
        300
      ]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// Basic validation and response preparation\nconst llamaParseResult = items[0].json;\nconst webhookData = $('DocsGPT Webhook').first().json;\n\n// Extract the markdown content\nlet markdownContent = '';\nif (llamaParseResult.markdown) {\n  markdownContent = llamaParseResult.markdown;\n} else if (typeof llamaParseResult === 'string') {\n  markdownContent = llamaParseResult;\n} else {\n  markdownContent = JSON.stringify(llamaParseResult);\n}\n\n// Prepare response data\nconst response = {\n  success: true,\n  batch_id: webhookData.batch_id,\n  user_id: webhookData.user_id,\n  processed_file: webhookData.files[0].name,\n  markdown_length: markdownContent.length,\n  processing_timestamp: new Date().toISOString(),\n  markdown_preview: markdownContent.substring(0, 500) + '...',\n  status: 'basic_processing_complete'\n};\n\nreturn [{ json: response }];"
      },
      "id": "basic-response",
      "name": "Prepare Basic Response",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1560,
        300
      ]
    }
  ],
  "connections": {
    "DocsGPT Webhook": {
      "main": [
        [
          {
            "node": "Split Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Files": {
      "main": [
        [
          {
            "node": "Read PDF File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read PDF File": {
      "main": [
        [
          {
            "node": "LlamaParse Upload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "LlamaParse Upload": {
      "main": [
        [
          {
            "node": "Wait for Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Processing": {
      "main": [
        [
          {
            "node": "Get LlamaParse Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get LlamaParse Results": {
      "main": [
        [
          {
            "node": "Prepare Basic Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "docsgpt-llamaparse-integration",
  "tags": []
}