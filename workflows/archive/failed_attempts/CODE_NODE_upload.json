{
  "name": "WORKING-Code-Node-LlamaParse",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "docsgpt-batch-process",
        "responseMode": "lastNode",
        "responseData": "allEntries"
      },
      "id": "webhook-trigger",
      "name": "DocsGPT Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "docsgpt-batch-process"
    },
    {
      "parameters": {
        "filePath": "/data/local/chemistry-json-debug-test.pdf/d4sc03921a.pdf",
        "options": {}
      },
      "id": "read-file",
      "name": "Read PDF File",
      "type": "n8n-nodes-base.readBinaryFile",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "mode": "runOnceForAllItems",
        "jsCode": "// DIRECT HTTP REQUEST WITH MANUAL MULTIPART - BYPASS BROKEN n8n HTTP REQUEST\nconst https = require('https');\nconst { URL } = require('url');\n\n// Get binary data\nif (!$binary || !$binary.data) {\n  throw new Error('No binary data available');\n}\n\nconst fileBuffer = $binary.data;\nconsole.log('File buffer length:', fileBuffer.length);\n\n// Create multipart boundary\nconst boundary = '----formdata-n8n-' + Math.random().toString(16);\n\n// Build multipart body manually\nlet body = '';\n\n// Add file field\nbody += `--${boundary}\\r\\n`;\nbody += `Content-Disposition: form-data; name=\"file\"; filename=\"d4sc03921a.pdf\"\\r\\n`;\nbody += `Content-Type: application/pdf\\r\\n\\r\\n`;\n\n// Convert body to buffer and append file data\nconst bodyStart = Buffer.from(body, 'utf8');\nconst bodyMiddle = fileBuffer;\nconst bodyEnd = Buffer.from(`\\r\\n--${boundary}\\r\\nContent-Disposition: form-data; name=\"result_type\"\\r\\n\\r\\nmarkdown\\r\\n--${boundary}\\r\\nContent-Disposition: form-data; name=\"premium_mode\"\\r\\n\\r\\ntrue\\r\\n--${boundary}--\\r\\n`, 'utf8');\n\nconst fullBody = Buffer.concat([bodyStart, bodyMiddle, bodyEnd]);\n\nconsole.log('Full body length:', fullBody.length);\n\n// Make HTTP request\nconst options = {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer LLAMAPARSE_API_KEY_PLACEHOLDER',\n    'Content-Type': `multipart/form-data; boundary=${boundary}`,\n    'Content-Length': fullBody.length\n  }\n};\n\nreturn new Promise((resolve, reject) => {\n  const req = https.request('https://api.cloud.llamaindex.ai/api/parsing/upload', options, (res) => {\n    let data = '';\n    res.on('data', (chunk) => data += chunk);\n    res.on('end', () => {\n      console.log('Response status:', res.statusCode);\n      console.log('Raw response:', data);\n      try {\n        const result = JSON.parse(data);\n        resolve([{ json: { success: true, llamaparse_response: result, status_code: res.statusCode } }]);\n      } catch (e) {\n        resolve([{ json: { success: false, error: 'Invalid JSON response', raw_response: data, status_code: res.statusCode } }]);\n      }\n    });\n  });\n  \n  req.on('error', (error) => {\n    console.error('Request error:', error);\n    reject(error);\n  });\n  \n  req.write(fullBody);\n  req.end();\n});"
      },
      "id": "direct-upload",
      "name": "Direct LlamaParse Upload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [680, 300]
    }
  ],
  "connections": {
    "DocsGPT Webhook": {
      "main": [[{"node": "Read PDF File", "type": "main", "index": 0}]]
    },
    "Read PDF File": {
      "main": [[{"node": "Direct LlamaParse Upload", "type": "main", "index": 0}]]
    }
  },
  "active": false,
  "settings": {},
  "versionId": "code-node",
  "meta": {},
  "id": "code-node-llamaparse-upload",
  "tags": []
}